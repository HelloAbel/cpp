timer：boost/timer.hpp
    timer的计时使用了标准库头文件中<ctime>里的std::clock()函数，它返回自进程启动以来的clock数，每秒的clock数则由宏
CLOCKS_PER_SEC定义。CLOCKS_PER_SEC与操作系统有关，在linux和mac下为1 000 000，在windows下为1 000，也就是说在linux
和mac下的计时精度为微妙，windows下为毫秒。
    timer不适合高精度的时间测量任务，它的精度依赖于操作系统或编译器，难以做到跨平台。timer也不适合大跨度时间段的测量，如果
需要以天、月甚至年作为时间的单位则不能使用timer，应使用以后学的cpu_timer组件。


progress_timer: boost/progress.hpp
    progress_timer是一个派生自timer的计时器，会在析构时自动输出时间，省去了timer手动调用elapsed的工作。
    progress_timer可以通过构造时指定输出流来使用，比如下面的代码：
        stringstream ss;
        {
            progress_timer t(ss);   //progress_timer将时间输出到字符串流中
        }
        cout << ss.str();


progress_display: boost/progress.hpp
    progress_display是一个可以显示当前程序执行进度的类，每走2%打印一个*，在需要打印进度的程序中调用重载过的++操作即可。
    注意：progress_display可以用作基本的进度显示，但是如果程序本身也有输出的话会和进度条发生混乱，一个可能的解决办法是在每次
显示进度的时候都调用progress_display类里面的restart()方法重新显示进度刻度，然后用重载过的+=操作符来指定当前进度，如下所示：
    pd.restart(v.size());
    pd += (pos - v.begin() + 1);


date_time: boost/date_time/gregorian/gregorian.hpp   boost/date_time/posix_time/posix_time.hpp
    date_time库需要编译才能使用，在jamfile里指定lib的语句是lib boost_date_time。
    处理日期的命名空间为boost::gregorian，支持的日期为1400-01-01到9999-12-31，处理时间的命名空间为boost::posix_time，本地
时间功能位于boost::local_time命名空间，需要包含头文件boost/date_time/local_time/local_time.hpp。
    date_time库中支持无限时间和无效时间，用枚举special_values定义了这些特殊的时间概念，它位于命名空间boost::date_time，并被
using语句引入其他子命名空间。其内容为：pos_infin --> 正无限时间；neg_infin --> 负无限时间；not_a_date_time --> 无效时间；
min_date_time --> 最小日期或时间；max_date_time --> 最大日期或时间。
    日期相关：
        处理日起的核心类是date，使用一个32位整数作为内部存储。date创建时如果参数为空，会创建一个not_a_date_time的无效时间，为了
    避免创建这种无效时间，可以在包含头文件前定义宏DATE_TIME_NO_DEFAULT_CONSTRUCTOR来禁止默认构造函数。
        创建对象时如果使用了非法的值，date_time库会抛出异常，而不是转换为一个无效日期，可以使用what()查看具体的错误信息。
        日期长度date_duration支持全序比较操作、完全的加减法和递增递减操作，此外还支持除法运算，可以除以一个整数，但不能除以另一
    个date_duration，其他的数学运算如乘法、取模、取余则不支持。date_time库为date_duration创建了一个typedef: days。
        date_time库还提供了months、years、weeks三个类，作用与days类似。months和years全面支持加减乘除运算，weeks是days的子类，除
    了构造函数以7为单位外其他行为与days相同。在运用months、years这两个类进行计算时要注意：如果日期是月末的最后一天，那么加减月或
    年会得到同样的月末时间，而不是简单的月份或者年份加1,这是合乎常识的，但是如果当天数是月末的28、29时，如果加减月份到2月，那么
    随后的运算就总是月末操作，原来的天数信息就会丢失。使用days类则不会出现这样的问题，如果担心weeks、months、years无意使用而扰乱
    代码，可以undef宏BOOST_DATE_TIME_OPTIOMAL_GREGORIAN_TYPES，这将使date_time库不包含它们的定义头文件<boost/date_time/gregorian/
    greg_duration_types.hpp>
        date_period类表示一个日期区间，是一个左闭右开的区间，代表从一个日期到另一个日期。date_period可以进行全序比较运算，但比较
    不是依据日期区间的长度，而是依据区间的端点，判断两个区间在时间轴上的位置大小，如果两个日期区间相交或者包含，那么比较无意义。
        日期迭代器day_iterator、week_iterator、month_iterator、year_iterator处于运算效率考虑，只提供前置版本的自增操作。但是日期
    迭代器虽然名字叫迭代器，却并不符合标准迭代器的定义，没有difference_type、pointer、reference等内部类型定义，也不能使用
    std::advance()或者operator+=来前进或者后退。
    时间相关：
        date_time库在格里高利历法的基础上提供微妙级别的时间系统，但如果需要，它最高可以达到纳秒级别的精度。
        time_duration支持全序比较操作和输入输出，而且比date_duration支持更多的算术运算，可以进行加减乘除全四则运算。可以转换到tm结构，同样
    使用to_tm函数，但不能进行反向转换。
        date_time库默认的时间精确度是微妙，纳秒相关的类和函数如nanosec和成员函数nanoseconds()、total_nanoseconds()都不可用。当定义了宏
    BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG时，time_duration的时间分辨率将精确到纳秒，构造函数中秒以下的时间度量单位也会变成纳秒。
        ptime相当于date+time_duration，可以被高效地任意拷贝赋值，也支持全序比较和加减运算。
        与日期区间相对应，time_period表示时间区间，用法与date_period基本相同。
        不同于日期迭代器，时间迭代器只有一个time_iterator。无须解引用也可以直接与ptime比较。
